
var Session = require('Tools/Session');
var Validator = require('Validators/ValidatorAutorisation');
var crypto = require('crypto');


function Controller(){
    var request, response, entity;
    
    Object.defineProperty(this, 'session', {value : new Session()});
    Object.defineProperty(this, 'validator', {value : new Validator()});
}

Controller.prototype.Execute = function(entity, request, response){
    var result, sid, store;
    this.request = request;
    this.response = response;
    this.entity = entity;
    result = this.validator.Validate(entity);
    if (!result){
        this.Send({error:"invalid login or password"});
        return;
    }

    store = core.GetStore(this.GetName());
    
    if (store == undefined){
        this.Send({error:"FATAL ERROR"});
        return;
    }
    
    do{
       sid = this.GenerateSid(); 
    }while(!store.Set(sid, result.privateInfo));
    
    this.session.Init(this.request, this.response);
    this.session.Set('sid', sid)
    
    this.Send(result.publicInfo);
}

Controller.prototype.GenerateSid = function(){
    return crypto.createHash('md5').update('secret word'+Date.now()).digest('hex');
}

Controller.prototype.Send = function(result){
    this.response.writeHead(200, {"Content-Type": "application/json"});
    this.response.write(JSON.stringify({controller: "sign_in_controller", entity: result}));
    this.response.end();
    
}

Controller.prototype.GetName = function(){
    return 'autorisation';
}

module.exports = Controller;